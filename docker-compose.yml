services:

#  # set file ownership
#  zrok-init:
#    image: busybox
#    command: chown -Rc 65534:65534 /mnt/.zrok
#    user: root
#    volumes:
#      - zrok_env:/mnt/.zrok
#
#  # enable zrok environment
#  zrok-enable:
#    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
#    depends_on:
#      zrok-init:
#        condition: service_completed_successfully
#    entrypoint: zrok-enable.bash
#    volumes:
#      - zrok_env:/mnt
#    environment:
#      STATE_DIRECTORY: /mnt
#      ZROK_ENABLE_TOKEN: ${ZROK_TOKEN}
#
#  # provision a temporary zrok frontend subdomain and start sharing the backend target
#  zrok-share:
#    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
#    restart: no
#    entrypoint: zrok-share.bash
#    depends_on:
#      zrok-test:
#        condition: service_started
#      zrok-enable:
#        condition: service_completed_successfully
#    volumes:
#      - zrok_env:/mnt
#    environment:
#      # internal configuration
#      STATE_DIRECTORY: /mnt  # zrok homedir in container
#      ZROK_FRONTEND_MODE: temp-public  # tells zrok-share.bash to create a temporary subdomain and share until exit
#
#      # most relevant options
#      ZROK_BACKEND_MODE: proxy  # web, caddy, drive, proxy
#      ZROK_TARGET: http://zrok-test:8001  # backend target, is a path in container filesystem unless proxy mode
#      ZROK_INSECURE: --insecure  # "--insecure" if proxy target has unverifiable TLS server certificate
#
#      # least relevant options
#      ZROK_VERBOSE: --verbose # "--verbose"
#      ZROK_SHARE_OPTS:        # additional arguments to "zrok share public" command
#      ZROK_FRONTENDS:         # "public"
#      PFXLOG_NO_JSON: "true"  # suppress JSON logging format

  # demo server you can share with zrok
  zrok-test:
    image: ${PROXY_IMAGE}
    ports:
      - "8001:8001"
    healthcheck:
      test: curl --fail http://localhost:8001 || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

volumes:
  zrok_env:
